const {
  mainKeyboard,
  settingsKeyboard,
  subscribeAnswerKeyBoardInline,
  unSubscribeAnswerKeyBoardInline,
} = require('../utils/keyBoards');
const { getPaginationInfo } = require('../utils/helpers');
const User = require('../models/user');

function setupSettings(bot) {
  bot.hears('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', (ctx) => showSettings(ctx));
  bot.hears('–†–∞—Å—Å—ã–ª–∫–∏', (ctx) => subscribesList(ctx));
  bot.hears('–ü–æ–¥–ø–∏—Å–∫–∏', (ctx) => paginationSubscribe(ctx, 1));
  bot.hears('üîô–ù–∞–∑–∞–¥', (ctx) => goBack(ctx));
  bot.hears('–û –±–æ—Ç–µ', (ctx) => about(ctx));
  bot.on('callback_query', (ctx) => callbackQuery(ctx));
}

async function callbackQuery(ctx) {
  tornaments = [];
  const query = ctx.callbackQuery.data;
  const re = new RegExp('‚úÖ|üö´');
  if (re.test(query)) {
    let info = '';
    const isReg = new RegExp('‚úÖ');
    const notIsReg = new RegExp('üö´');
    const val = query.replace(re, '').trim();
    if (notIsReg.test(query)) {
      const data = await User.findOneAndUpdate({chat_id: ctx.chat.id}, { $addToSet : { subscribeTournaments: val }}, { new: true } );
      tornaments = data.subscribeTournaments;
      info = '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è';
    } else if (isReg.test(query)) {
      const data = await User.findOneAndUpdate({chat_id: ctx.chat.id}, { $pull : { subscribeTournaments: val }}, { new: true });
      tornaments = data.subscribeTournaments;
      info = '–û—Ç–ø–∏—Å–∞–ª—Å—è';
    }
    const current = ctx.session.currentPage || 1;
    await ctx.answerCbQuery(info);
    const options = await getPaginationInfo(current, 5, tornaments);
    ctx.editMessageReplyMarkup(options.reply_markup);
  } else {
    paginationSubscribe(ctx);
  }
}

async function paginationSubscribe(ctx, curentPage) {
  const tornaments = ctx.session.user.subscribeTournaments;
  const current = curentPage || parseInt(ctx.callbackQuery.data.match(/\d+/))
  ctx.session.currentPage = current;
  const options = await getPaginationInfo(current, 5, tornaments);
  const info = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ${current}`;
  if (!curentPage) {
    ctx.editMessageText(info, options);
  } else {
    ctx.replyWithHTML(info, options);
  }
}

function showSettings(ctx) {
  const options = settingsKeyboard;
  const info = '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —É–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ –ø—É—à–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã';
  ctx.replyWithHTML(info, options);
}

function subscribesList(ctx) {
  const user = ctx.session.user;
  let info;
  let options;
  if (user && user.onScheduler) {
    info = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏?'
    options = unSubscribeAnswerKeyBoardInline;
  } else {
    info = '–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ—Ç –±—É–¥–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—à —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–µ–π.'
    options = subscribeAnswerKeyBoardInline
  }
  ctx.replyWithHTML(info, options);
}

function goBack(ctx) {
  const options = mainKeyboard;
  ctx.replyWithHTML('–ü–µ—Ä–µ—Ö–æ–∂—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', options);
}

function about(ctx) {
  ctx.replyWithHTML('–Ø —Å–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, —Ç–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—Å @Rookmeister.–ï—Å–ª–∏ —è –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω, —Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å <a href="https://sobe.ru/na/rookmeister">–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ</a>.', {disable_web_page_preview: true});
}

// Exports
module.exports = {
  setupSettings,
}