const fetch = require('node-fetch');
// const stringTable = require('string-table');
require('dotenv').config();

const Telegraf = require('telegraf')
// const Composer = require('telegraf/composer')
const session = require('telegraf/session')
// const Stage = require('telegraf/stage')
const Markup = require('telegraf/markup')
// const WizardScene = require('telegraf/scenes/wizard')
// const stage = new Stage([superWizard], { default: 'super-wizard' })
const bot = new Telegraf(process.env.BOT_TOKEN)

// API Sports
function returnApi(countryNumber, viewResult) {
  return `https://www.sports.ru/core/stat/gadget/${viewResult}/?args={%22tournament_id%22:${countryNumber}}`;
}

// Country
const country = ['üá∑üá∫', 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', 'üá™üá∏', 'üáÆüáπ', 'üá©üá™', 'üá´üá∑'];
const countryCode = {'üá∑üá∫': 31, 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø': 52, 'üá™üá∏': 49, 'üáÆüáπ': 48, 'üá©üá™': 50, 'üá´üá∑': 51};
// View
const view = ['–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'];
const viewCode = {'–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞': 'tournament_table', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã': 'last_matches', '–ö–∞–ª–µ–Ω–¥–∞—Ä—å': 'future_matches'};

bot.use(session())

bot.hears('–ß–µ–º–ø–∏–æ–Ω–∞—Ç', ({reply}) => {
  // ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç!', Markup.inlineKeyboard([
  //   Markup.callbackButton('üá∑üá∫', 31),
  //   Markup.callbackButton('üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', 52),
  //   Markup.callbackButton('üá™üá∏', 49),
  //   Markup.callbackButton('üáÆüáπ', 48),
  //   Markup.callbackButton('üá©üá™', 50),
  //   Markup.callbackButton('üá´üá∑', 51),
  // ]).extra())
  return reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç',Markup
    .keyboard([
      country
    ])
    .resize()
    .oneTime()
    .extra()
  )
})

bot.command('start', ({ reply }) => {
  return reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–µ–º–ø–∏–æ–Ω–∞—Ç"',Markup
    .keyboard([
      ['–ß–µ–º–ø–∏–æ–Ω–∞—Ç'],
    ])
    .resize()
    .oneTime()
    .extra()
  )
})

bot.hears(country, (ctx) => {
  console.log(1, ctx.match)
  ctx.session.country = countryCode[ctx.match]
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',Markup
    .keyboard([
      [...view, '–ß–µ–º–ø–∏–æ–Ω–∞—Ç']
    ])
    .resize()
    .oneTime()
    .extra()
  )
})

bot.hears(view, async (ctx) => {
  console.log(2, ctx.match)
  ctx.session.view = viewCode[ctx.match]
  if (!ctx.session.country) {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º–ø–∏–æ–Ω–∞—Ç',Markup
      .keyboard([
        ['–ß–µ–º–ø–∏–æ–Ω–∞—Ç']
      ])
      .resize()
      .oneTime()
      .extra()
    )
  } else {
    const url = returnApi(ctx.session.country, ctx.session.view);
    const info = await getData(url, ctx.session.view);
    ctx.replyWithHTML(info)
  }
})

// bot.action(/^[0-9]{2}$/i, ctx => {
//   ctx.session.country = ctx.update.callback_query.data || null;
//   ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', Markup.inlineKeyboard([
//     Markup.callbackButton('–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞', 'tournament_table'),
//     Markup.callbackButton('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'last_matches'),
//     Markup.callbackButton('–ö–∞–ª–µ–Ω–¥–∞—Ä—å', 'future_matches'),
//   ]).extra())
// })

// bot.on('callback_query', async (ctx) => {
//   console.log(3, ctx.match)
  // const url = returnApi(ctx.session.country, ctx.update.callback_query.data);
  // const info = await getData(url, ctx.update.callback_query.data);
  // ctx.replyWithHTML(info)
//   ctx.reply(1123)
// })

bot.launch()

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π :
async function getData(url, view) {
  try {
    const data = await fetch(url);
    const json = await data.json();
    let result = '';
    if (view === 'tournament_table') {
      const table = [];
      json.tournament_table[0].list.forEach(element => {
        result +=`<b>${element.place} –º–µ—Å—Ç–æ</b> \u2014 <i>${element.team_info.name}</i> | ${element.score}\r\n`;
        // table.push({place: element.place, team: element.team_info.name})
      });
      // result = stringTable.create(table);
    } else {
      json.match_list.forEach(element => {
        result += `\r\n<i>${element.title}</i>\r\n\r\n`;
        if (element.matches.length) {
          element.matches.forEach(el => {
            if (view === 'last_matches') {
              result += `${el.first_team.name} \u2014 ${el.second_team.name}  ${el.first_team.goals}:${el.second_team.goals}\r\n`;
            }
            else {
              result += `${el.first_team.name} \u2014 ${el.second_team.name} (${el.start_time.bulgakov} - –º—Å–∫. –≤—Ä–µ–º—è)\r\n`;
            }
          });
        }
      });
    }
    return result;
  } catch (err) {
    console.error('Fail to fetch data: ' + err);
    return '–û—à–∏–±–∫–∞';
  }
}
